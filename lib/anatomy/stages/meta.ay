-- build paragraphs, set title info, add sub-parts

use("atomy")

data = require("anatomy/data")


close-paragraph(body) =
  when(body last is-a(data Paragraph)?):
    body last closed? = true

ensure-paragraph(body) =
  unless(body last is-a(data Paragraph)? and
          not body last closed?):
    body << data Paragraph new([])

add-content-to((str: String), body) =
  str split("\n\n", 2) match:
    [? chomp empty?, rest]:
      close-paragraph(body)
      add-content-to(rest, body)

    [content, rest]:
      ensure-paragraph(body)
      body last content << content
      close-paragraph(body)
      add-content-to(rest, body)

    [content]:
      ensure-paragraph(body)
      body last content << content

    []:
      close-paragraph(body)

add-content-to(x, body) = do:
  ensure-paragraph(body)
  body last content << x


pass((m: data MetaBlock), part, body = part body) := do:
  m action[part]
  nil

pass((a: Array), part, body = part body) := do:
  a each [x]:
    pass(x, part, body)

  nil

pass((p: data Part), part, body = part body) := do:
  part parts << p
  p parent = part
  part body freeze
  nil

pass((i: data Itemization), part, body = part body) :=
  unless(body frozen?):
    body <<
      i dup tap [x]:
        x elements collect! [n, b]:
          body = []
          pass(b, part, body)
          [n, body]

pass((l: data List), part, body = part body) :=
  unless(body frozen?):
    body <<
      l dup tap [x]:
        x elements collect! [b]:
          body = []
          pass(b, part, body)
          body

pass((b: data Block), part, body = part body) :=
  unless(body frozen?):
    body <<
      b style match:
        .tt -> b

        .verbatim -> b

        .header(_) -> b

        _ ->
          b dup tap [x]:
            x content = []
            pass(b content, part, x content)

pass(x, part, body = part body) :=
  condition:
    body frozen? -> nil

    data content(x)? ->
      add-content-to(x, body)

    otherwise ->
      body << x

over(x, part) := pass(x, part, part body)
