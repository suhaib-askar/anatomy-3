use(require("atomy"))
use(require("io"))
use(require("dynamic"))

require("json")
require("fileutils")

use(require("anatomy/html"))
data = require("anatomy/data")


fn(tag-url(t)):
  t target match:
    .anchor(x):
      url(t part, x)

    .self:
      url(t part)

    .url(x):
      x

def(over(i & data Itemization)):
  i elements collect [name, body]:
    <dl:
      [ <dt: over(name)
        <dd: over(body)
      ]
def(over(l & data OrderedList)):
  <ol:
    l elements collect [body]:
      <li: over(body)
def(over(l & data List)):
  <ul:
    l elements collect [body]:
      <li: over(body)
def(over(p & data Paragraph)):
  <p: over(p content)
def(over(b & data Block)):
  b style match:
    .tt:
      <pre: over(b content)

    .verbatim:
      <pre(.verbatim): over(b content)

    .class(*classes):
      <div(class = classes join(" ")): over(b content)

    .header(depth):
      <"h#{depth}": over(b content)

    .inset:
      <div(style = "margin: 0 2em 1em"): over(b content)

    .centered:
      <div(style = "text-align: center"): over(b content)

    .margin-note:
      <blockquote: over(b content)

    nil:
      <div: over(b content)

in-reference? = dynamic(false)
in-sidebar? = dynamic(false)

def(over(t & data Target)):
  <a(name = t name): nil
def(over(p & data Reference)):
  if(p tag)
    then:
      <a(href = tag-url(p tag)):
        with(in-reference? = true):
          over(p content)
    else:
      <a(.undefined): over(p content)
def(over(r & data ResolveElement)):
  error(.did-not-resolve(r))
def(over(e & data Element)):
  e style match:
    .italic:
      <em: over(e content)

    .bold:
      <strong: over(e content)

    .tt:
      <code: over(e content)

    .superscript:
      <sup: over(e content)

    .subscript:
      <sub: over(e content)

    .smaller:
      <span(style = "font-size: 80%"): over(e content)

    .larger:
      <span(style = "font-size: 120%"): over(e content)

    .strike:
      <span(style = "text-decoration: line-through"): over(e content)

    .class(*classes):
      <span(class = classes join(" ")): over(e content)

    .hyperlink(url):
      <a(href = url): over(e content)

    .image(file):
      <img(src = file, alt = over(e content))

    .svg(file):
      <object(data = file, type = "image/svg+xml", width = "100%", height = "100%"):
        <param(name = "src", value = file)

    .script-src(url):
      <script(src = url) {}

    .async-script-src(url):
      <script(async = true, defer = true, src = url) {}

    .aux:
      unless(^(in-reference?) || ^(in-sidebar?)):
        over(e content)

def(over(nil)): nil
def(over(s & String)): s
def(over(a & Array)):
  a collect [x]: over(x)


def(filename(p)): p tag name + ".html"


def(top(p)):
  condition:
    (p parent && p parent toc?):
      p

    p parent:
      top(p parent)

    otherwise:
      p

def(url(p, anchor = nil)):
  condition:
    (top(p) != p):
      (url(top(p)) + "#") + (anchor || p tag name)

    anchor:
      (filename(p) + "#") + anchor

    otherwise:
      filename(p)


def(toc-leaf(current-part, part)):
  classes = []

  when(part == current-part):
    classes << "current"

  when(part contains-part?(current-part)):
    classes << "active"

  <li(class = classes join(" ")):
    <a(href = url(part)):
      over(part title)

    unless(part omit-children-from-table-of-contents? || part parts empty?):
      <ol:
        part parts collect &.(Self toc-leaf(current-part, _))


def(render(part, out = ".")):
  unless(part parent):
    tags = search-tags(part) collect [t, d, u]:
      [t, d to-s, u]

    File open(i"#{out}/public/tags.js", "w") [f]:
      f write(i"var SEARCH_TAGS = #{tags to-json};")

  class =
    if(part style properties empty?)
      then: "normal"
      else: part style properties collect &.to-s join(" ")

  File open(i"#{out}/#{filename(part)}", "w") [f]:
    f write("<!DOCTYPE html>")
    f write(
      <html {
        <head:
          <meta("http-equiv" = "Content-Type", content = "text/html; charset=UTF-8")
          <title: StrippedTags new(over(part title))

          unless(part template):
            [ <link(type = "text/css", rel = "stylesheet", href = "public/anatomy.css")
              <link(type = "text/css", rel = "stylesheet", href = "public/highlight.css")
            ]

          <script(type = "text/javascript", src = "public/jquery.js") {}
          <script(type = "text/javascript", src = "public/jquery.hotkeys.js") {}
          <script(type = "text/javascript", src = "public/tags.js") {}
          <script(type = "text/javascript", src = "public/main.js") {}

          all-css-additions(part) collect [addition]:
            <link(type = "text/css", rel = "stylesheet", href = File basename(addition))

        <body(class = class):
          render-part-template(part, out)

          when(analytics-id = ENV["ANALYTICS_ID"]):
            <script: UnescapedString new(i"
              (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
              (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
              m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
              })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

              ga('create', '#{analytics-id}', 'auto');
              ga('send', 'pageview');
            ")
      })

def(render-part-template(part, out = ".")):
  copy-part-assets(part, out)
  (part template || Self) template-for(part, out)

def(template-for(part, out)):
  <div(#page):
    <div(#main):
      <div(#content):
        render-part(part, out)

    <div(.search):
      <form(action = "javascript:void(0)"):
        <input(
            type = "text"
            placeholder = "Search&hellip;"
            autocomplete = "off"
            #search)

        <ul(.search-results) {}

    with(in-sidebar? = true):
      <div(#sidebar):
        <h2:
          <a(href = url(part top)):
            over(part top title)

        <ol(.toc):
          part top parts collect [p]:
            toc-leaf(part, p)

def(render-part(part, out = ".", depth = 1)):
  <div(.section, id = i"section_#{part tag name}"):
    <"h#{depth}"(.section_header):
      <a(name = part tag name) {}
      over(part title)

    over(part body)

    if(part toc?)
      then:
        <ol(.toc, #table-of-contents):
          part parts collect [sub]:
            render(sub, out)
            toc-leaf(part, sub)
      else:
        part parts collect [sub]:
          copy-part-assets(sub, out)
          render-part(sub, out, depth + 1)

def(copy-part-assets(part, out)):
  part assets each [a]:
    FileUtils cp_r(a, out, #{.remove_destination -> true})

  part css-additions each [a]:
    FileUtils cp_r(a, out)

def(search-tags(p)):
  tags = [
    [ data contents-of(p title)
      <span(.title):
        <a(href = url(p)):
          over(p title)
      url(p)
    ]
  ]

  p tags each-key [tag-name]:
    tag = p find-tag(tag-name)
    url = tag-url(tag)
    tags <<
      [ tag name
        if(tag display)
          then:
            <a(href = url): over(tag display)
          else:
            <span(.tag):
              <code:
                <a(href = url):
                  tag name
        url
      ]

  p parts each [sub]:
    tags += search-tags(sub) collect [t, d, u]:
      [ t
        if(d is-a?(HTMLElement) && (d attributes[.class] == "with_parent"))
          then: d
          else:
            <span(.with-parent):
              d
              <span(.parent):
                " in "
                <a(href = url(p)):
                  over(p title)
        u
      ]

  tags

def(all-css-additions(p)):
  assets = p css-additions to-a

  p parts each [sub]:
    -- exclude parts that have their own page
    unless(top(sub) == sub):
      assets += all-css-additions(sub)

  assets
