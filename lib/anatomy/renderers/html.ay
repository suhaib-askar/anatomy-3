use("atomy")
use("io")

use("anatomy/html")
data = require("anatomy/data")


over(s: String) := s
over(t: data::Target) :=
  <a(name = t tag): nil
over(p: data::Paragraph) :=
  <p: over(p content)
over(p: data::Reference) := do:
  url =
    p source match:
      .anchor(part, anchor) ->
        part url(anchor)

      .part(part) ->
        part url

      .url(url) ->
        url

  <a(href = url): over(p content)
over(a: Array) :=
  over(x) for x in a

-- just return a string for now
render(part, out = ".") :=
  with-output-to(i"#{out}/#{part filename}"):
    <html {
      <head:
        <title: over(part title)
        <link(type = "text/css", rel = "stylesheet", href = "public/doodle.css")
        <link(type = "text/css", rel = "stylesheet", href = "public/highlight.css")
        <script(type = "text/javascript", src = "public/jquery.js") {}
        <script(type = "text/javascript", src = "public/jquery.hotkeys.js") {}
        --<script(type = "text/javascript", src = "public/tags.js") {}
        <script(type = "text/javascript", src = "public/main.js") {}
      <body:
        <div(#main):
          <div(#content):
            render-part(part)

        <div(.search):
          <form(action = "javascript:void(0)"):
            <input(
                type = "text"
                placeholder = "Search&hellip;"
                autocomplete = "off"
                #search)

            <div(#sidebar):
              <h4: "On this page:"
              <ol(.toc):
                nil

              <h4: "Up one level:"
              <ol(.toc):
                nil
    } println

render-part(part, depth = 1) :=
  <div(.section, id = i"section_#{part tag}"):
    <"h#{depth}"(.section_header):
      over(part title)

    over(part body)

    render-part(sub, depth + 1) for sub in part parts
