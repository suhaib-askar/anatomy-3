use("atomy")
use("io")

require("json")

use("anatomy/html")
data = require("anatomy/data")


source-to-url(.anchor(part, anchor)) =
  url(part, anchor)
source-to-url(.part(part)) =
  url(part)
source-to-url(.url(url)) =
  url

over(i: data::Itemization) :=
  <dl:
    [ <dt: over(name)
      <dd: over(body)
    ] for [name, body] in i elements
over(p: data::Paragraph) :=
  <p: over(p content)
over(b: data::Block) :=
  b style match:
    .tt ->
      <pre: over(b content)

    .class(x) ->
      <div(class = x): over(b content)

    nil ->
      <div: over(b content)

over(t: data::Target) :=
  <a(name = t tag): nil
over(p: data::Reference) :=
  if(p source)
    then:
      <a(href = source-to-url(p source)): over(p content)
    else:
      <a(.undefined): over(p content)
over(e: data::Element) :=
  e style match:
    .italic ->
      <em: over(e content)

    .bold ->
      <strong: over(e content)

    .tt ->
      <code: over(e content)

    .superscript ->
      <sup: over(e content)

    .subscript ->
      <sub: over(e content)

    -- TODO
    .smaller ->
      <span(style = "font-size: 80%"): over(e content)

    -- TODO
    .larger ->
      <span(style = "font-size: 120%"): over(e content)

    .class(x) ->
      <span(class = x): over(e content)

over(nil) := nil
over(s: String) := s
over(a: Array) :=
  over(x) for x in a


filename(p) := p tag + ".html"


top(p) :=
  condition:
    p parent and .toc is-in p parent style properties ->
      p

    p parent ->
      top(p parent)

    otherwise ->
      p

url(p, anchor = nil) :=
  condition:
    top(p) != p ->
      url(top(p)) + "#" + (anchor || p tag)

    anchor ->
      filename(p) + "#" + anchor

    otherwise ->
      filename(p)


toc-leaf(part) :=
  <li:
    <a(href = url(part)):
      over(part title)

    unless(part parts empty?):
      <ol:
        toc-leaf(s) for s in part parts


-- just return a string for now
render(part, out = ".") := do:
  tags = [t, d to-s, u] for [t, d, u] in search-tags(part)
  File open(i"#{out}/public/tags_#{part tag}.js", "w") [f]:
    f write(i"var SEARCH_TAGS = #{tags to-json};")

  File open(i"#{out}/#{filename(part)}", "w") [f]:
    f write("<!DOCTYPE html>")
    f write(
      <html {
        <head:
          <title: over(part title)
          <link(type = "text/css", rel = "stylesheet", href = "public/anatomy.css")
          <link(type = "text/css", rel = "stylesheet", href = "public/highlight.css")
          <script(type = "text/javascript", src = "public/jquery.js") {}
          <script(type = "text/javascript", src = "public/jquery.hotkeys.js") {}
          <script(type = "text/javascript", src = i"public/tags_#{part tag}.js") {}
          <script(type = "text/javascript", src = "public/main.js") {}
        <body:
          <div(#main):
            <div(#content):
              render-part(part, out)

          <div(.search):
            <form(action = "javascript:void(0)"):
              <input(
                  type = "text"
                  placeholder = "Search&hellip;"
                  autocomplete = "off"
                  #search)

            <ul(.search-results) {}

          <div(#sidebar):
            unless(part parts empty?):
              [ <h4: "On this page:"

                <ol(.toc):
                  toc-leaf(s) for s in part parts
              ]

            when(part parent):
              [ <h4: "Up one level:"
                <ol(.toc):
                  toc-leaf(part parent)
              ]
      })

render-part(part, out = ".", depth = 1) := do:
  toc? = .toc is-in part style properties

  <div(.section, id = i"section_#{part tag}"):
    <"h#{depth}"(.section_header):
      <a(name = part tag) {}
      over(part title)

    over(part body)

    if(toc?)
      then:
        <ol(.toc, #table-of-contents):
          part parts collect [sub]:
            render(sub, out)
            toc-leaf(sub)
      else:
        render-part(sub, out, depth + 1) for sub in part parts


search-tags(p) := do:
  tags = [
    [ data contents-of(p title)
      <span(.title):
        <a(href = url(p)):
          over(p title)
      url(p)
    ]
    [ p tag
      <span(.tag):
        "tag: "
        <code:
          <a(href = url(p)): p tag
      url(p)
    ]
  ]

  -- TODO: let tags control their display
  p tags each-key [tag]:
    url = source-to-url(p find-tag(tag))
    tags <<
      [ tag
        <span(.tag):
          <code:
            <a(href = url): tag
        url
      ]

  p parts each [sub]:
    tags +=
      [ t
        if(d attributes[.class] == "with_parent")
          then: d
          else:
            <span(.with-parent):
              d
              <span(.parent):
                " in "
                <a(href = url(p)):
                  over(p title)
        u
      ] for [t, d, u] in search-tags(sub)

  tags
